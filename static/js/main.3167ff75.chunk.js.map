{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","todolist","set_todolist","counter","setcounter","className","type","id","onClick","input","document","getElementById","text","value","trim","length","new_todolist","task","isdone","key","map","item","attrid","style","textDecoration","backgroundColor","e","index","target","parentNode","attributes","parseInt","complete_item","filter","delitem","Math","random","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"iOA0DeA,MAvDf,WAAgB,IAAD,EACkBC,mBAAS,IAD3B,mBACRC,EADQ,KACEC,EADF,OAEeF,mBAAS,GAFxB,mBAERG,EAFQ,KAECC,EAFD,KAiCb,OACE,sBAAKC,UAAU,MAAf,UACE,+DACA,uBAAOA,UAAU,YAAYC,KAAK,OAAOC,GAAG,cAF9C,KAE8D,wBAAQC,QAjCvD,WACf,IAAIC,EAAQC,SAASC,eAAe,aAChCC,EAAOH,EAAMI,MAAMC,OACvB,GAAIF,EAAKG,OAAS,EAAG,CAEnBX,EADAD,GAAoB,GAEpB,IAAIa,EAAY,sBAAOf,GAAP,CAAiB,CAAEgB,KAAML,EAAMM,QAAQ,EAAOC,IAAKhB,KACnED,EAAac,GACbP,EAAMI,MAAQ,KAyBwER,UAAU,MAApC,iBAC5D,qBAAKA,UAAU,aAAf,SACE,gCACE,gCAEIJ,GAAYA,EAASmB,KAAI,SAACC,GAAD,OACvB,qBAAwBC,OAAQD,EAAKF,IAArC,UACE,qBAAII,MAAO,CAAEC,eAAgBH,EAAKH,OAAS,eAAiB,GAAIO,gBAAiBJ,EAAKH,OAAS,UAAY,IAA3G,cAAmH,8BAAIG,EAAKJ,KAAT,aACnH,6BAAI,wBAAQT,QAAS,SAACkB,IAvBhB,SAACA,GACrB,IAAIC,EAAQD,EAAEE,OAAOC,WAAWA,WAAWC,WAAWR,OAAOT,MACzDG,EAAef,EAASmB,KAAI,SAACC,GAC/B,OAAIA,EAAKF,KAAOY,SAASJ,IACvBN,EAAKH,QAAS,EACPG,GAEAA,KAGXnB,EAAac,GAa+BgB,CAAcN,IAAMrB,UAAU,SAAxD,uBACJ,6BAAI,wBAAQG,QAAS,SAACkB,IA/BtB,SAACA,GACf,IAAIC,EAAQD,EAAEE,OAAOC,WAAWA,WAAWC,WAAWR,OAAOT,MACzDG,EAAef,EAASgC,QAAO,SAACZ,GAClC,OAAOA,EAAKF,KAAOY,SAASJ,MAE9BzB,EAAac,GA0B+BkB,CAAQR,IAAMrB,UAAU,SAAlD,yBAHG8B,KAAKC,uBCjCfC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtC,SAASC,eAAe,SAM1B0B,M","file":"static/js/main.3167ff75.chunk.js","sourcesContent":["import './App.css';                  // component css\nimport { useState } from 'react';   // import useStat function\n\nfunction App() {\n  let [todolist, set_todolist] = useState([]); // create a reactive array that containe our main todo tasks\n  let [counter, setcounter] = useState(0); // create a counter for tasks\n   const additem = () => {                                             \n    let input = document.getElementById('inputitem'); \n    let text = input.value.trim();        // get task key number\n    if (text.length > 0) {\n      counter = counter + 1; //  set new task key\n      setcounter(counter)\n      let new_todolist = [...todolist, { task: text, isdone: false, key: counter }]; // add new task to task list\n      set_todolist(new_todolist); \n      input.value = '';\n    }\n  };\n  const delitem = (e) => {\n    let index = e.target.parentNode.parentNode.attributes.attrid.value;\n    let new_todolist = todolist.filter((item) => {\n      return item.key != parseInt(index)                      // delete task by key id\n    })\n    set_todolist(new_todolist);\n  }\n  const complete_item = (e) => {\n    let index = e.target.parentNode.parentNode.attributes.attrid.value;\n    let new_todolist = todolist.map((item) => {\n      if (item.key == parseInt(index)) {\n        item.isdone = true                            // set task isdone value to true\n        return item\n      } else {\n        return item\n      }\n    })\n    set_todolist(new_todolist)\n  }\n  return (\n    <div className=\"App\">\n      <p >A simple todo app by group 11 </p>\n      <input className='inputlist' type=\"text\" id='inputitem' />  <button onClick={additem} className='btn'>Add</button>\n      <div className='todo-table'>\n        <table>\n          <tbody>\n            {\n              todolist && todolist.map((item) => (\n                <tr key={Math.random()} attrid={item.key}>\n                  <td style={{ textDecoration: item.isdone ? \"line-through\" : \"\", backgroundColor: item.isdone ? '#42f542' : '' }} > <p>{item.task}    </p></td>\n                  <td><button onClick={(e) => { complete_item(e) }} className='cmpbtn'> ✓</button></td>\n                  <td><button onClick={(e) => { delitem(e) }} className='delbtn'> ✕</button></td>\n                </tr>\n              ))\n            }\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}