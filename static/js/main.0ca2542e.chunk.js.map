{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","todolist","set_todolist","counter","setcounter","className","type","id","onClick","input","document","getElementById","text","value","trim","length","console","log","new_todolist","task","isdone","key","map","item","attrid","style","textDecoration","backgroundColor","e","index","target","parentNode","attributes","parseInt","complete_item","filter","delitem","Math","random","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"iOA0EeA,MAvEf,WAAgB,IAAD,EACkBC,mBAAS,IAD3B,mBACRC,EADQ,KACEC,EADF,OAEeF,mBAAS,GAFxB,mBAERG,EAFQ,KAECC,EAFD,KA0Cb,OACE,sBAAKC,UAAU,MAAf,UACE,mDACA,uBAAOA,UAAU,YAAYC,KAAK,OAAOC,GAAG,cAF9C,KAE8D,wBAAQC,QAzCxD,WACd,IAAIC,EAAQC,SAASC,eAAe,aAChCC,EAAOH,EAAMI,MAAMC,OACvB,GAAIF,EAAKG,OAAS,EAAG,CAGnBX,EADAD,GAAoB,GAEpBa,QAAQC,IAAId,GACZ,IAAIe,EAAY,sBAAOjB,GAAP,CAAiB,CAAEkB,KAAMP,EAAMQ,QAAQ,EAAOC,IAAKlB,KACnED,EAAagB,GACbF,QAAQC,IAAIhB,GACZQ,EAAMI,MAAQ,KA8BwER,UAAU,MAApC,iBAC5D,sBAAKA,UAAU,aAAf,UACE,wBAAQG,QAAS,kBAAMQ,QAAQC,IAAIhB,IAAnC,mBACA,gCACE,gCAGIA,GAAYA,EAASqB,KAAI,SAACC,GAAD,OACvB,qBAAwBC,OAAQD,EAAKF,IAArC,UACE,qBAAII,MAAO,CAAEC,eAAgBH,EAAKH,OAAS,eAAiB,GAAIO,gBAAiBJ,EAAKH,OAAS,UAAY,IAA3G,cAAmH,8BAAIG,EAAKJ,KAAT,IAAgBI,EAAKF,IAArB,aACnH,6BAAI,wBAAQb,QAAS,SAACoB,IA1BhB,SAACA,GACrB,IAAIC,EAAQD,EAAEE,OAAOC,WAAWA,WAAWC,WAAWR,OAAOX,MACzDK,EAAejB,EAASqB,KAAI,SAACC,GAC/B,OAAIA,EAAKF,KAAOY,SAASJ,IACvBN,EAAKH,QAAS,EACPG,GAEAA,KAGXrB,EAAagB,GAgB+BgB,CAAcN,IAAMvB,UAAU,SAAxD,uBACJ,6BAAI,wBAAQG,QAAS,SAACoB,IArCtB,SAACA,GACf,IAAIC,EAAQD,EAAEE,OAAOC,WAAWA,WAAWC,WAAWR,OAAOX,MACzDK,EAAejB,EAASkC,QAAO,SAACZ,GAElC,OADAP,QAAQC,IAAIY,EAAON,EAAKF,KACjBE,EAAKF,KAAOY,SAASJ,MAE9B3B,EAAagB,GA+B+BkB,CAAQR,IAAMvB,UAAU,SAAlD,yBAHGgC,KAAKC,wBC5CfC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASC,eAAe,SAM1B4B,M","file":"static/js/main.0ca2542e.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from 'react';   // import useStat function\n\nfunction App() {\n  let [todolist, set_todolist] = useState([]);\n  let [counter, setcounter] = useState(0);\n  // create a reactive array\n  const additem = () => {\n    let input = document.getElementById('inputitem');\n    let text = input.value.trim()\n    if (text.length > 1) {\n\n      counter = counter + 1;\n      setcounter(counter)\n      console.log(counter);\n      let new_todolist = [...todolist, { task: text, isdone: false, key: counter }];\n      set_todolist(new_todolist);\n      console.log(todolist);\n      input.value = '';\n    }\n\n  };\n  const delitem = (e) => {\n    let index = e.target.parentNode.parentNode.attributes.attrid.value;\n    let new_todolist = todolist.filter((item) => {\n      console.log(index, item.key);\n      return item.key != parseInt(index)\n    })\n    set_todolist(new_todolist);\n\n  }\n\n  const complete_item = (e) => {\n    let index = e.target.parentNode.parentNode.attributes.attrid.value;\n    let new_todolist = todolist.map((item) => {\n      if (item.key == parseInt(index)) {\n        item.isdone = true\n        return item\n      } else {\n        return item\n      }\n    })\n    set_todolist(new_todolist)\n\n  }\n  return (\n    <div className=\"App\">\n      <p >A simple todo app </p>\n      <input className='inputlist' type=\"text\" id='inputitem' />  <button onClick={additem} className='btn'>Add</button>\n      <div className='todo-table'>\n        <button onClick={() => console.log(todolist)}>click</button>\n        <table>\n          <tbody>\n            {\n\n              todolist && todolist.map((item) => (\n                <tr key={Math.random()} attrid={item.key}>\n                  <td style={{ textDecoration: item.isdone ? \"line-through\" : \"\", backgroundColor: item.isdone ? '#42f542' : '' }} > <p>{item.task} {item.key}    </p></td>\n                  <td><button onClick={(e) => { complete_item(e) }} className='cmpbtn'> ✓</button></td>\n                  <td><button onClick={(e) => { delitem(e) }} className='delbtn'> ✕</button></td>\n                </tr>\n              ))\n            }\n          </tbody>\n\n\n\n\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}